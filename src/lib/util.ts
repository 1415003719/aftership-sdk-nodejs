import { AftershipError } from '../error/error';
import { ErrorEnum } from '../error/error_enum';
import { SingleTrackingParam } from '../model/tracking/single_tracking_param';

/**
 * Build tracking url by tracking_id or slug + tracking_number.
 * Will be deprecated soon, please use "buildTrackingUrlByParam" instead.
 * @param tracking_id A unique identifier generated by AfterShip for the tracking.
 * @param slug Unique code of courier
 * @param tracking_number Tracking number of a shipment.
 */
export function buildTrackingUrl(
  tracking_id?: string,
  slug?: string,
  tracking_number?: string,
): string {
  // tracking_id
  if (isStringValid(tracking_id)) {
    if (isStringValid(slug) || isStringValid(tracking_number)) {
      throw AftershipError.getSdkError(
        ErrorEnum.handlerInvalidBothTrackingIdAndNumber,
        tracking_id,
      );
    }

    return `${tracking_id}`;
  }

  // slug && tracking_number
  if (!isStringValid(slug) || !isStringValid(tracking_number)) {
    throw AftershipError.getSdkError(
      ErrorEnum.handlerInvalidEmptyTrackingIdAndNumber,
      tracking_number,
    );
  }

  return `${slug}/${tracking_number}`;
}

/**
 * Build tracking url by param
 * @param param tracking param
 */
export function buildTrackingUrlByParam(param: SingleTrackingParam): string {
  if (param === undefined) {
    throw AftershipError.getSdkError(
      ErrorEnum.handlerInvalidEmptyTrackingIdAndNumber,
      param,
    );
  }

  return buildTrackingUrl(
    param.tracking_id,
    param.slug,
    param.tracking_number,
  );
}

/**
 * Check if the string value is valid
 * @param val string value
 */
export function isStringValid(val: string | undefined): boolean {
  return val !== undefined && val !== null && val !== '';
}
