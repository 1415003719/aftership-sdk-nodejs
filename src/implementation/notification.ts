import { ApiRequest } from '../lib/api_request';
import { AftershipResponse } from '../model/aftership_response';
import { NotificationEndpoint } from '../endpoint/notification_endpoint';
import { Notification } from '../model/notification/notification';
import { NotificationRequest } from '../model/notification/notification_request';
import { buildTrackingUrl } from '../lib/util';

export class NotificationImplementation implements NotificationEndpoint {
  private readonly request: ApiRequest;

  constructor(request: ApiRequest) {
    this.request = request;
  }

  /**
   * Get contact information for the users to notify when the tracking changes.
   * Please note that only customer receivers will be returned.
   * Any email, sms or webhook that belongs to the Store will not be returned.
   * Either one tracking_id or (slug + tracking_number) should be specified.
   * @param tracking_id A unique identifier generated by AfterShip for the tracking.
   * @param slug Unique code of courier
   * @param tracking_number Tracking number of a shipment.
   */
  public getNotification(
    tracking_id?: string,
    slug?: string,
    tracking_number?: string,
  ): Promise<AftershipResponse<Notification>> {
    const trackingUrl = buildTrackingUrl(tracking_id, slug, tracking_number);
    return this.request.makeRequest<null, Notification>({
      method: 'GET',
      url: `/notifications/${trackingUrl}`,
    });
  }

  /**
   * Add notification receivers to a tracking tracking id (number).
   * Either one tracking_id or (slug + tracking_number) should be specified.
   * @param notification Notification Request Object
   * @param tracking_id A unique identifier generated by AfterShip for the tracking.
   * @param slug Unique code of courier
   * @param tracking_number Tracking number of a shipment.
   */
  public addNotification(
    notification: NotificationRequest,
    tracking_id?: string,
    slug?: string,
    tracking_number?: string,
  ): Promise<AftershipResponse<Notification>> {
    const trackingUrl = buildTrackingUrl(tracking_id, slug, tracking_number);
    return this.request.makeRequest<NotificationRequest, Notification>(
      { method: 'POST', url: `/notifications/${trackingUrl}/add` },
      notification,
    );
  }

  /**
   * Remove notification receivers from a tracking tracking id (number).
   * Either one tracking_id or (slug + tracking_number) should be specified.
   * @param notification Notification Request Object
   * @param tracking_id A unique identifier generated by AfterShip for the tracking.
   * @param slug Unique code of courier
   * @param tracking_number Tracking number of a shipment.
   */
  public removeNotification(
    notification: NotificationRequest,
    tracking_id?: string,
    slug?: string,
    tracking_number?: string,
  ): Promise<AftershipResponse<Notification>> {
    const trackingUrl = buildTrackingUrl(tracking_id, slug, tracking_number);
    return this.request.makeRequest<NotificationRequest, Notification>(
      {
        method: 'POST',
        url: `/notifications/${trackingUrl}/remove`,
      },
      notification,
    );
  }
}
